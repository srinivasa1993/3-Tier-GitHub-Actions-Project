name: Node.js CI/CD with ACR + AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write    # ðŸ‘ˆ Needed for Azure OIDC login
  contents: read     # ðŸ‘ˆ Required for checkout

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Frontend Syntax Check
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Backend Syntax Check
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2

  
  sonar-frontend:
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: client
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    runs-on: ubuntu-latest
    needs: sonar-frontend
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: api
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: ${{ secrets.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}

  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: ${{ secrets.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }}

  trivy_image_scan:
   runs-on: agent 1
   needs: [build_backend_docker_image_and_push, build_frontend_docker_image_and_push]
   steps:
    - uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Login to ACR
      run: az acr login --name ${{ secrets.ACR_NAME }}

    - name: Trivy Scan Backend
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: image
        image-ref: ${{ secrets.ACR_NAME }}.azurecr.io/backend:${{ github.sha }}
        format: table
        severity: CRITICAL,HIGH
        exit-code: '1'

    - name: Trivy Scan Frontend
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: image
        image-ref: ${{ secrets.ACR_NAME }}.azurecr.io/frontend:${{ github.sha }}
        format: table
        severity: CRITICAL,HIGH
        exit-code: '1'


  deploy_to_aks:
    runs-on: ubuntu-latest
    needs: trivy_image_scan
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s-prod/sc.yaml
          kubectl apply -f k8s-prod/mysql.yaml
          kubectl apply -f k8s-prod/backend.yaml
          kubectl apply -f k8s-prod/frontend.yaml
          kubectl apply -f k8s-prod/ingress.yaml
